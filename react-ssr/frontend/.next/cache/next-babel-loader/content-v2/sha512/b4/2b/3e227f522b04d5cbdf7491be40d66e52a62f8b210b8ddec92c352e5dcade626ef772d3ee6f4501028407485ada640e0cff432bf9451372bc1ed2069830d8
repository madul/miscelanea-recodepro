{"ast":null,"code":"const indexAndList = (state, item) => {\n  let indexItem = state.map((itemList, index) => itemList.product.productID == item.product.productID ? index : -1).find(value => value >= 0);\n  let listCopy = [...state];\n  return [indexItem, listCopy];\n};\n\nexport const addItem = (state, item) => {\n  let [indexItem, listCopy] = indexAndList(state, item);\n\n  if (indexItem >= 0) {\n    listCopy[indexItem][\"quantity\"] += 1;\n    return {\n      type: \"ADD_ITEM\",\n      items: listCopy\n    };\n  } else {\n    if (listCopy[0].quantity == 0) {\n      listCopy[0].quantity = 1;\n      listCopy[0].product = item.product;\n    } else {\n      listCopy.push({\n        quantity: 1,\n        product: item.product\n      });\n    }\n\n    return {\n      type: \"ADD_ITEM\",\n      items: listCopy\n    };\n  }\n};\nexport const removeItem = (state, item) => {\n  let [indexItem, listCopy] = indexAndList(state, item);\n\n  if (listCopy[indexItem][\"quantity\"] > 0) {\n    listCopy[indexItem][\"quantity\"] -= 1;\n\n    if (listCopy[indexItem][\"quantity\"] == 0) {\n      let listAux = deleteItem(state, item).items;\n      listCopy = listAux.length > 0 ? listAux : [{\n        quantity: 0,\n        product: {}\n      }];\n    }\n\n    return {\n      type: \"REMOVE_ITEM\",\n      items: listCopy\n    };\n  }\n\n  return {\n    type: \"REMOVE_ITEM\",\n    items: state\n  };\n};\nexport const deleteItem = (state, item) => {\n  let [indexItem, listCopy] = indexAndList(state, item);\n\n  if (indexItem >= 0) {\n    listCopy.splice(indexItem, 1);\n    listCopy = listCopy.length > 0 ? listCopy : [{\n      quantity: 0,\n      product: {}\n    }];\n    return {\n      type: \"DELETE_ITEM\",\n      items: listCopy\n    };\n  }\n\n  return {\n    type: \"DELETE_ITEM\",\n    items: state\n  };\n};\nexport const alterQItem = (state, item, newQtd) => {\n  let [indexItem, listCopy] = indexAndList(state, item);\n\n  if (indexItem >= 0) {\n    listCopy[indexItem][\"quantity\"] = newQtd;\n    return {\n      type: \"ALTER_Q_ITEM\",\n      items: listCopy\n    };\n  }\n\n  return {\n    type: \"DELETE_ITEM\",\n    items: state\n  };\n};\nexport const discardCart = () => {\n  return {\n    type: \"DISCARD_CART\"\n  };\n};","map":{"version":3,"sources":["C:/Users/maria/Documents/Recode/Curso/ModuloNoSQL/PitangaCos/frontend/src/actions/cartActions.js"],"names":["indexAndList","state","item","indexItem","map","itemList","index","product","productID","find","value","listCopy","addItem","type","items","quantity","push","removeItem","listAux","deleteItem","length","splice","alterQItem","newQtd","discardCart"],"mappings":"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","sourcesContent":["const indexAndList = (state, item) => {\r\n  let indexItem = state.map((itemList, index) =>  \r\n      itemList.product.productID == item.product.productID? index:-1).find((value)=>value >= 0);\r\n  \r\n  let listCopy = [...state];\r\n\r\n  return [indexItem,  listCopy]\r\n\r\n}\r\n\r\nexport const addItem = (state,item) => {\r\n  \r\n  let [indexItem, listCopy] = indexAndList(state,item)\r\n\r\n  if(indexItem >=0){\r\n   listCopy[indexItem][\"quantity\"] +=1;\r\n\r\n    return{\r\n      type: \"ADD_ITEM\",\r\n      items: listCopy\r\n    }\r\n  } else{\r\n    if(listCopy[0].quantity == 0){\r\n      listCopy[0].quantity = 1;\r\n      listCopy[0].product = item.product   \r\n    }\r\n    else {\r\n    listCopy.push({quantity: 1, product:item.product})\r\n    }\r\n    return{\r\n      type: \"ADD_ITEM\",\r\n      items: listCopy\r\n    }\r\n  }\r\n}\r\n\r\nexport const removeItem = (state,item) => {\r\n  let [indexItem, listCopy] = indexAndList(state,item)\r\n  \r\n  if(listCopy[indexItem][\"quantity\"] > 0){\r\n    listCopy[indexItem][\"quantity\"] -=1;\r\n\r\n    if(listCopy[indexItem][\"quantity\"] == 0){\r\n      let listAux = deleteItem(state, item).items\r\n\r\n      listCopy = listAux.length > 0 ? listAux : [{quantity:0, product:{}}]\r\n  \r\n    } \r\n    return {\r\n      type: \"REMOVE_ITEM\",\r\n      items: listCopy\r\n    }\r\n  }     \r\n  return {\r\n    type: \"REMOVE_ITEM\",\r\n    items: state\r\n  }\r\n}\r\n\r\nexport const deleteItem = (state,item) => {\r\n  let [indexItem, listCopy] = indexAndList(state,item)\r\n\r\n  if (indexItem >=0) {\r\n    listCopy.splice(indexItem,1)\r\n    \r\n    listCopy = listCopy.length > 0 ? listCopy : [{quantity:0, product:{}}]\r\n    \r\n    return {\r\n      type: \"DELETE_ITEM\",\r\n      items: listCopy\r\n    }\r\n  }\r\n  \r\n  return {\r\n    type: \"DELETE_ITEM\",\r\n    items: state\r\n  }\r\n}\r\n\r\nexport const alterQItem = (state, item,newQtd) => {\r\n  let [indexItem, listCopy] = indexAndList(state,item)\r\n\r\n    if (indexItem >=0) {\r\n      listCopy[indexItem][\"quantity\"] = newQtd;\r\n      return {\r\n        type: \"ALTER_Q_ITEM\",\r\n        items: listCopy\r\n      }\r\n    }\r\n    return {\r\n      type: \"DELETE_ITEM\",\r\n      items: state\r\n    }\r\n}\r\nexport const discardCart = () =>{\r\n  return {\r\n    type: \"DISCARD_CART\"\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}