{"ast":null,"code":"/** CHECK DATA OF CUSTOMER REGISTRATION**/\nexport function validate_data(event) {\n  event.preventDefault();\n  console.log(event.target.value);\n  let valid = false;\n  let message = \"\";\n\n  switch (event.target.id) {\n    case 'cpf':\n      valid = validarCPF(event.target.value);\n\n      if (!valid) {\n        message = 'CPF inválido.';\n      }\n\n      break;\n\n    case 'senha':\n      if (event.target.value.length >= 6) {\n        valid = true;\n      } else {\n        message = 'A senha precisa ter mais do que 6 caracteres.';\n      }\n\n      break;\n\n    case 'confirmSenha':\n      let senha = document.getElementById('senha').value;\n\n      if (event.target.value === senha) {\n        valid = true;\n      } else {\n        message = 'As senhas não são iguais.';\n      }\n\n      break;\n\n    case 'cep':\n      valid = pesquisacep(event.target.value);\n\n      if (!valid) {\n        message = \"Formato de CEP inválido.\";\n      }\n\n      break;\n\n    default:\n      valid = true;\n  } //console.log(parent.querySelectorAll(`p.alert_${element.id}`).length);\n  //console.log('valid',valid); \n\n\n  console.log('message: ', message);\n  return {\n    campo: event.target.id,\n    valid: valid,\n    message: message\n  };\n}\n/**  PRE MADE FUNCTIONS**/\n\n/** Função do site https://tiagoporto.github.io/gerador-validador-cpf/  **/\n\nfunction validarCPF(cpf) {\n  cpf = cpf.replace(/[^\\d]+/g, '');\n  if (cpf === '') return false; // Elimina CPFs invalidos conhecidos\t\n\n  if (cpf.length !== 11 || cpf === \"00000000000\" || cpf === \"11111111111\" || cpf === \"22222222222\" || cpf === \"33333333333\" || cpf === \"44444444444\" || cpf === \"55555555555\" || cpf === \"66666666666\" || cpf === \"77777777777\" || cpf === \"88888888888\" || cpf === \"99999999999\") return false; // Valida 1o digito\t\n\n  let add = 0;\n  let rev = 0;\n\n  for (let i = 0; i < 9; i++) add += parseInt(cpf.charAt(i)) * (10 - i);\n\n  rev = 11 - add % 11;\n  if (rev === 10 || rev === 11) rev = 0;\n  if (rev !== parseInt(cpf.charAt(9))) return false; // Valida 2o digito\t\n\n  add = 0;\n\n  for (let i = 0; i < 10; i++) add += parseInt(cpf.charAt(i)) * (11 - i);\n\n  rev = 11 - add % 11;\n  if (rev === 10 || rev === 11) rev = 0;\n  if (rev !== parseInt(cpf.charAt(10))) return false;\n  return true;\n}\n/** Função baseada no site https://viacep.com.br/exemplo/javascript/  **/\n\n\nfunction meu_callback(conteudo) {\n  if (!(\"erro\" in conteudo)) {\n    //Atualiza os campos com os valores.\n    document.getElementById('address').value = conteudo.logradouro;\n    document.getElementById('city').value = conteudo.localidade;\n    document.getElementById('uf').value = conteudo.uf;\n  } //end if.\n  else {\n      //CEP não Encontrado.\n      let element = document.getElementById('cep');\n      element.value = \"\";\n      let oldElements = document.getElementsByClassName(`alert_${element.id}`);\n      Array.from(oldElements).forEach(oldElement => oldElement.remove());\n      alert(\"CEP não encontrado.\");\n    }\n}\n\nfunction pesquisacep(valor) {\n  //Nova variável \"cep\" somente com dígitos.\n  var cep = valor.replace(/\\D/g, ''); //Verifica se campo cep possui valor informado.\n\n  if (cep !== \"\") {\n    //Expressão regular para validar o CEP.\n    var validacep = /^[0-9]{8}$/; //Valida o formato do CEP.\n\n    if (validacep.test(cep)) {\n      //Preenche os campos com \"...\" enquanto consulta webservice.\n      document.getElementById('address').value = \"...\";\n      document.getElementById('city').value = \"...\";\n      document.getElementById('uf').value = \"...\"; //Sincroniza com o callback.\n\n      let url = `https://viacep.com.br/ws/${cep}/json/`;\n      fetch(url).then(response => response.json()).then(data => meu_callback(data));\n      return true;\n    } //end if.\n    else {\n        //cep é inválido.\n        return false;\n      }\n  } //end if.\n  else {\n      //cep sem valor, limpa formulário.\n      return false;\n    }\n}\n\n;","map":{"version":3,"sources":["C:/Users/maria/Documents/Recode/Curso/ModuloNoSQL/PitangaCos/frontend/src/pages/SignUp/validation.js"],"names":["validate_data","event","preventDefault","console","log","target","value","valid","message","id","validarCPF","length","senha","document","getElementById","pesquisacep","campo","cpf","replace","add","rev","i","parseInt","charAt","meu_callback","conteudo","logradouro","localidade","uf","element","oldElements","getElementsByClassName","Array","from","forEach","oldElement","remove","alert","valor","cep","validacep","test","url","fetch","then","response","json","data"],"mappings":"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","sourcesContent":["\r\n/** CHECK DATA OF CUSTOMER REGISTRATION**/\r\nexport function validate_data(event){\r\n  event.preventDefault();\r\n  console.log(event.target.value)\r\n  let valid = false;\r\n  let message = \"\"\r\n\r\n  switch (event.target.id){\r\n    case 'cpf':\r\n      valid = validarCPF(event.target.value);\r\n      if (!valid){\r\n        message = 'CPF inválido.'\r\n      }\r\n      break;\r\n    case 'senha':\r\n      if (event.target.value.length >= 6){\r\n        valid = true;\r\n      } else{\r\n        message = 'A senha precisa ter mais do que 6 caracteres.'\r\n      }\r\n      break;\r\n    case 'confirmSenha':\r\n      let senha = document.getElementById('senha').value;\r\n      if (event.target.value === senha){\r\n        valid = true;\r\n      } else{\r\n        message = 'As senhas não são iguais.'\r\n      }\r\n      break;\r\n    case 'cep':\r\n      valid = pesquisacep(event.target.value);\r\n      if(!valid){\r\n        message = \"Formato de CEP inválido.\";\r\n      }\r\n    \r\n      break;\r\n    \r\n    default:\r\n      valid = true;\r\n  }\r\n  //console.log(parent.querySelectorAll(`p.alert_${element.id}`).length);\r\n  //console.log('valid',valid); \r\n  console.log('message: ', message)\r\n  return {campo: event.target.id, valid: valid, message: message}\r\n} \r\n\r\n/**  PRE MADE FUNCTIONS**/\r\n\r\n/** Função do site https://tiagoporto.github.io/gerador-validador-cpf/  **/\r\nfunction validarCPF(cpf) {\t\r\n\tcpf = cpf.replace(/[^\\d]+/g,'');\t\r\n\tif(cpf === '') return false;\t\r\n\t// Elimina CPFs invalidos conhecidos\t\r\n\tif (cpf.length !== 11 || \r\n\t\tcpf === \"00000000000\" || \r\n\t\tcpf === \"11111111111\" || \r\n\t\tcpf === \"22222222222\" || \r\n\t\tcpf === \"33333333333\" || \r\n\t\tcpf === \"44444444444\" || \r\n\t\tcpf === \"55555555555\" || \r\n\t\tcpf === \"66666666666\" || \r\n\t\tcpf === \"77777777777\" || \r\n\t\tcpf === \"88888888888\" || \r\n\t\tcpf === \"99999999999\")\r\n\t\t\treturn false;\t\t\r\n\t// Valida 1o digito\t\r\n\tlet add = 0;\t\r\n  let rev = 0;\r\n\tfor (let i=0; i < 9; i ++)\t\t\r\n\t\tadd += parseInt(cpf.charAt(i)) * (10 - i);\t\r\n\t\trev = 11 - (add % 11);\t\r\n\t\tif (rev === 10 || rev === 11)\t\t\r\n\t\t\trev = 0;\t\r\n\t\tif (rev !== parseInt(cpf.charAt(9)))\t\t\r\n\t\t\treturn false;\t\t\r\n\t// Valida 2o digito\t\r\n\tadd = 0;\t\r\n\tfor (let i = 0; i < 10; i ++)\t\t\r\n\t\tadd += parseInt(cpf.charAt(i)) * (11 - i);\t\r\n\trev = 11 - (add % 11);\t\r\n\tif (rev === 10 || rev === 11)\t\r\n\t\trev = 0;\t\r\n\tif (rev !== parseInt(cpf.charAt(10)))\r\n\t\treturn false;\t\t\r\n\treturn true;   \r\n}\r\n\r\n/** Função baseada no site https://viacep.com.br/exemplo/javascript/  **/\r\nfunction meu_callback(conteudo) {\r\n  if (!(\"erro\" in conteudo)) {\r\n      //Atualiza os campos com os valores.\r\n      document.getElementById('address').value=(conteudo.logradouro);\r\n      document.getElementById('city').value=(conteudo.localidade);\r\n      document.getElementById('uf').value=(conteudo.uf);\r\n  } //end if.\r\n  else {\r\n      //CEP não Encontrado.\r\n      let element = document.getElementById('cep');\r\n      element.value = \"\";\r\n      let oldElements = document.getElementsByClassName(`alert_${element.id}`);\r\n      Array.from(oldElements).forEach(oldElement => oldElement.remove());\r\n\r\n      alert(\"CEP não encontrado.\");\r\n  }\r\n}\r\nfunction pesquisacep(valor) {\r\n  \r\n  //Nova variável \"cep\" somente com dígitos.\r\n  var cep = valor.replace(/\\D/g, '');\r\n\r\n  //Verifica se campo cep possui valor informado.\r\n  if (cep !== \"\") {\r\n\r\n      //Expressão regular para validar o CEP.\r\n      var validacep = /^[0-9]{8}$/;\r\n\r\n      //Valida o formato do CEP.\r\n      if(validacep.test(cep)) {\r\n\r\n          //Preenche os campos com \"...\" enquanto consulta webservice.\r\n          document.getElementById('address').value=\"...\";\r\n          document.getElementById('city').value=\"...\";\r\n          document.getElementById('uf').value=\"...\";\r\n\r\n\r\n          //Sincroniza com o callback.\r\n          let url = `https://viacep.com.br/ws/${cep}/json/`;\r\n\r\n          fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => meu_callback(data))\r\n          return true;\r\n\r\n      } //end if.\r\n      else {\r\n          //cep é inválido.\r\n          return false;\r\n      }\r\n  } //end if.\r\n  else {\r\n      //cep sem valor, limpa formulário.\r\n      return false;\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}